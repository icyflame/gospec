#!/bin/bash

# --- Printing related

println () {
    echo -e "${1}"
}

# gist with the original color table code:
# https://gist.github.com/elliotlarson/a22fab0b1aff1b5cc742273ac8ed196f
# setaf color table:
# https://unix.stackexchange.com/a/269085/36994
initialize_colors () {
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    BLUE=$(tput setaf 4)
    COLOR_RESET=$(tput sgr0)
    BOLD=$(tput bold)
}

colorize () {
    local str=${1}

    local color=${2:-${COLOR_RESET}}

    println "${color}$str${COLOR_RESET}"
}

help () {
    cat <<EOF
gospec v0.1.0

gospec prettifies the output of \`go test\`

Usage:
    gospec [options] [package] [test-regex]

Available options:
    [--no-color |-C] => do not use colors when printing the summarized output
    [--no-output|-O] => do not print output for failing tests, just the test name

Examples:
    # Run complete test suite, print failing tests and their output
    gospec

    # Run gospec without using colors in the output
    gospec -C

    # Print a list of failing test names and a summary
    gospec -O

    # Run tests matching Percent in the utils package
    gospec ./utils Percent

    # Run all tests that match the given regex
    gospec "/Base"

Webpage:
    https://github.com/icyflame/gospec
EOF
}

# --- JSON parsing related

count_action () {
    local output="${1}"
    local action="${2}"
    get_by_action "$output" "$action" | jq -r '. | length'
}

get_by_action () {
    local output="${1}"
    local action="${2}"
    echo "$output" | jq -r '[.[] | select(.Action == "'"$action"'")]'
}

get_tests () {
    local output="${1}"
    echo "$output" | jq -c '[.[] | select(.Test != null)]'
}

get_by_test_and_action () {
    local output="${1}"
    local test_name="${2}"
    local action="${3}"
    echo "$output" | \
        jq '[.[] | select(.Test == "'"$test_name"'") | select(.Action == "'"$action"'")]'
}


# --- Printing various parts of the output

test_summary () {
    local output="${1}"

    pass_count=$(count_action "$output" "pass")
    fail_count=$(count_action "$output" "fail")
    skip_count=$(count_action "$output" "skip")

    local result=""

    local color="${GREEN}"
    if [ $fail_count -gt 0 ]; then
        color="${RED}"
    fi

    result+=$(colorize "$pass_count PASS, $fail_count FAIL, $skip_count SKIP" "${color}")
    echo $result
}

test_list_by_pkg () {
    local output="${1}"
    local action="${2}"
    local print_output="${3}"
    get_by_action "$output" "$action" | \
        for failed_package in $(jq -c 'group_by(.Package) | .[]');
        do
            package_name=$(echo "$failed_package" | jq -r '[.[].Package] | unique | .[0]')
            println
            colorize "$package_name" "$BLUE"
            echo "$failed_package" | \
                for test_name in $(jq -r 'sort_by(.Test) | reverse | .[].Test');
                do
                    colorize "\t$test_name" "$RED"

                    if [ "$print_output" == "yes" ]; then
                        local action="output";
                        get_by_test_and_action "$output" "$test_name" "output" | \
                            jq -r '.[].Output | select(test("^\\s*(---|===) (SKIP|RUN|PAUSE|CONT|PASS|FAIL)") | not) | sub("\\n"; "")'
                    fi
                done
            done
        }

# --- Main function

gospec () {
    local use_colors="yes"
    local print_output="yes"
    local pass_thru="no"
    local package="./..."
    local regex="."
    local json="-json"

    if [ $# -eq 1 ];
    then
        case "${1}" in
            ('-h' | '--help' | 'help')
                help
                return
        esac
    fi

    case "${1}" in
        ('pt' | 'passthru')
            pass_thru="yes"
            json=""
            shift
    esac

    case "${1}" in
        ('--no-color' | '-C')
            use_colors="no"
            shift
    esac

    case "${1}" in
        ('--no-output' | '-O')
            print_output="no"
            shift
    esac

    [ -n "${1}" ] && package="${1}"
    [ -n "${2}" ] && regex="${2}"
    [ $# -eq 1 -a ! -d "$package" ] && regex="$package" && package="./..."

    cmd_go_test="go test $json -v $package -run $regex"

    echo $cmd_go_test >&2

    if [[ "$pass_thru" == "yes" ]];
    then
        $cmd_go_test
        return
    fi

    cmd_jq="jq -c --slurp ."
    output=$($cmd_go_test)
    output=$(echo "$output" | $cmd_jq)

    output_tests=$(get_tests "$output")
    fail_count=$(count_action "$output" "fail")

    [ "$use_colors" == "yes" ] && initialize_colors

    if [ $fail_count -gt 0 ];
    then
        if [ "$print_output" == "yes" ];
        then
            println
            colorize "Failing tests (output):" "$RED"
            test_list_by_pkg "$output_tests" "fail" "yes"
        fi

        println
        colorize "Failing tests (summary):" "$RED"
        test_list_by_pkg "$output_tests" "fail" "no"
    fi

    println
    test_summary "$output_tests"
}

gospec $@
